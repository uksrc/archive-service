%dev.quarkus.hibernate-orm.database.generation=drop-and-create
%test.quarkus.hibernate-orm.database.generation=drop-and-create
%prod.quarkus.hibernate-orm.database.generation=update

quarkus.hibernate-orm.database.generation.create-schemas=true
quarkus.hibernate-orm.database.generation.halt-on-error=false
quarkus.hibernate-orm.quote-identifiers.strategy=all

# Error logging
#quarkus.log.level=DEBUG
#quarkus.log.console.enable=true
#quarkus.naming.enable-jndi=true
#quarkus.log.category."org.uksrc.archive.utils".level=DEBUG

quarkus.http.root-path=/archive

# NOTE: DEV only - fixed port (jdbc url actually) required for TAP service
# Only added to stop random port allocation of postgres container each time app starts
quarkus.datasource.devservices.enabled=true
quarkus.datasource.devservices.port=5432

quarkus.datasource.db-kind=postgresql
%dev.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/quarkus
#quarkus.datasource.jdbc.max-size=20
%dev.quarkus.datasource.username=quarkus
%dev.quarkus.datasource.password=quarkus

%test.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/quarkus
%test.quarkus.datasource.username=quarkus
%test.quarkus.datasource.password=quarkus

%prod.quarkus.datasource.jdbc.url=${DB_URL}
%prod.quarkus.datasource.username=${DB_USERNAME}
%prod.quarkus.datasource.password=${DB_PASSWORD}

#%kubernetes.quarkus.datasource.jdbc.url=${DB_URL}
#%kubernetes.quarkus.datasource.username=${DB_USERNAME}
#%kubernetes.quarkus.datasource.password=${DB_PASSWORD}
#quarkus.kubernetes.namespace=archive-service

#Kubernetes
quarkus.container-image.builder=docker
quarkus.container-image.name=archive-service
quarkus.container-image.registry=images.dev.uksrc.org
quarkus.container-image.group=library
quarkus.container-image.tag=latest

# pull-policy never for local (minikube etc.) auto-deployment
quarkus.kubernetes.image-pull-policy=Never
%prod.quarkus.kubernetes.image-pull-policy=Always
quarkus.container-image.push=false

#Change this for deployment at build time (could do with a k8s specific build so it will always build even if a docker service isn't running).
quarkus.kubernetes.deploy=false

#Change this for deployment at build time.
quarkus.container-image.build=false

#RBAC for reading secrets
#%prod.quarkus.kubernetes.deployment-target=kubernetes
#%prod.quarkus.kubernetes.service-account=archive-service

quarkus.hibernate-orm.*.log.sql=true

# OIDC Details
%dev.quarkus.oidc.auth-server-url=https://ska-iam.stfc.ac.uk
%test.quarkus.oidc.auth-server-url=https://ska-iam.stfc.ac.uk
%test.quarkus.oidc.client-id=dummy-client
%test.quarkus.oidc.credentials.secret=dummy-secret
quarkus.oidc.auth-server-url=${OIDC_SERVER_URL}
quarkus.oidc.client-id=${OIDC_CLIENT_ID}
quarkus.oidc.credentials.secret=${OIDC_CLIENT_SECRET}
quarkus.oidc.application-type=service
quarkus.oidc.roles.source=accesstoken
quarkus.oidc.groups-claim=groups
quarkus.oidc.token.issuer=https://ska-iam.stfc.ac.uk/
quarkus.oidc.token.audience=authn-api

%dev.quarkus.log.category."io.quarkus.oidc".level=DEBUG
# Only required when generating bearer tokens locally in dev mode
%dev.authentication.callback=http://localhost:8080/archive/auth-callback
%test.authentication.callback=http://localhost:8080/archive/auth-callback
%prod.authentication.callback=${OIDC_AUTH_CALLBACK}

# Custom IAM settings
# OIDC/IAM is disabled in Dev mode by default for convenience, enable if testing IAM
%dev.security.roles.enabled=false
%test.security.roles.enabled=true
%prod.security.roles.enabled=true

# Details of IAM groups that allow access to resources
resource.roles.view=UKSRC/archive-service/viewer,UKSRC/archive-service/maintainer,UKSRC/archive-service/admin
resource.roles.edit=UKSRC/archive-service/maintainer,UKSRC/archive-service/admin
# Reserved for future requirements
#resource.roles.admin=UKSRC/archive-service/admin

# Change depending on deployment destination
#%prod.authentication.callback=${AUTH_CALLBACK_URL}
%prod.quarkus.kubernetes-config.enabled=true
%prod.quarkus.kubernetes-config.secrets.enabled=true
%prod.quarkus.kubernetes-config.secrets=archive-service-secret
%prod.quarkus.kubernetes.env.secrets=archive-service-secret

# Enable security in production for APIs
%prod.quarkus.http.auth.permission.authenticated.policy=authenticated
%prod.quarkus.http.auth.permission.authenticated.paths=observations/*,collections/*
# Allow access to web pages
%prod.quarkus.http.auth.permission.public.paths=/*
%prod.quarkus.http.auth.permission.public.policy=permit

# Disable security in dev and test
%dev.quarkus.http.auth.permission.public.policy=permit
%dev.quarkus.http.auth.permission.public.paths=/*
%test.quarkus.http.auth.permission.public.policy=permit
%test.quarkus.http.auth.permission.public.paths=/*

#Add to display generated SQL via hibernate
#quarkus.hibernate-orm.log.sql=true
#quarkus.hibernate-orm.log.bind-parameters=true
jakarta.persistence.create-database-schemas=true

#For dev & "normal" mode - path will be created under java.io.tmpdir
vollt.tap.config.path=/archive-service/config
%dev.vollt.tap.config.path=/archive-service/config
#Fixed path for production
%prod.vollt.tap.config.path=/deployments/config